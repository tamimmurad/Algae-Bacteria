
Generate Artificial Fastas, Run Metaphlan, Kraken and Bracken
1- Download reference genomes from NCBI.
2- Extract RefSeq .fna files and add them to one directory (genomes_fasta).
3- Rename the files to species name and avoid using spaces and dots.
4- Make a table of species names and species level NCBI taxids(make sure it is not strain) in a tsv file seperate directory (species_taxids.tsv). 
5- Generate simulated reads in fasta files using the scripts 'fasta_generation/sample_genomes_batch.sh' and have them in a seperate directory 'out_generated_fasta'.
 You should have 24 fasta files named with coverage and runs and 24 reports.
6- On the directory above run Kraken2(kraken_batch,sh) and Metaphlan(metaphlan_batch_1.sh) and have the results in 2 new different directories(out_tool_results/skraken and out_tool_results/metaphlan_sequences).
7- On the kraken results directory, run bracken(bracken_threshold100_batch.sh) and have the results in a new directory (out_tool_results/bracken_100_threshold).
8- On the kraken results directory, run bracken(bracken_no_threshould_batch.sh) and have the results in a new directory (out_tool_results/bracken_no_threshold).
9- From the fasta files directory, take out the bowtie files generated by the metaphlan run and move them to a new directory(out_tool_results/metaphlan_bowtie).
10- Run Metaphlan (metaphlan_batch_2) on the bowtie directory and save the results in a new directory(out_tool_results/metaphlan_RA). 

Complexity Analysis Kraken

1- on kraken directory, run complexity analysis with the script (kraken_komplexity_batch.sh). This will run only on the classiffied sequences.
2- Results from above are to be stored in a new directory (kraken_classified_complexity).
3- Run the analyze_complexity_filtering.py to get the results of TPs and FPs at different threshould. Store the results in kraken_results under the complexity_analysis directory.

Complexity Analysis Metaphlan

1 - Generate fasta files for classified sequences in the directory (metaphlan_sequences) using the script produce_metaph_class_fastas.py.
2 - The results of 1 are stored in the same directory. Now run the script metaphlan_komplexity_batch.sh to get complexity calculations files.
3 - The results are to be stored in a new directory metaphlan_classified_complexity.
4 - Run the analyze_complexity_filtering.py to get the results of TPs and FPs at different threshould. Store the results in metaphlan_results under the complexity_analysis directory. 

Overlap (Metaphlan and Bracken) Results

1- Make sure that the directory of the metaphlan_RA results and Bracken results that you are intending to use have exactly the same # of files with same names. You can use 'rename' in bash.
2- In this case, we will use previously created metaphlan_RA, bracken_no_threshold and bracken_100_threshold.
3- Run the script overlap_metaph_bra_batch.sh once with metaphlan_RA and bracken_no_threshold. Another run with metaphlan_RA and bracken_100_threshold.
4- Results are stored under the overlap_analysis directory with two seperate directory one for each run (overlap_resuts_no_th and overlap_results_100_th).

Performance Comparison betweem All Methods

1- With 6 directories for results, 1 directory for the original simulated fasta reports, 1 file for taxids of species, run the script analyaze_tools_performance.py.
2- Please note that this script is done with hard coding on purpose. Please edit the code with relative paths of your files with an editor before running if necessary.
3- If you are using a different genome set, please look through the above script at the comments in lines 195.
