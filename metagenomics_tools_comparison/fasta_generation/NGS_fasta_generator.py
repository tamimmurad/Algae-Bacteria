# -*- coding: utf-8 -*-
"""
Spyder Editor
Script Name: NGS_fasta_generator.py

Description:
The script creates a synthetic fasta file emulating an output of a sequencing experiment of a sample.
The input files should be genomes of spices and the output is mixed reads of the genomes as a fasta file.The user specifies
a directory where the genomes to be sampled are stored. The script will generate a random coverage for each genome 
(emulating the number of cells in the sample). Each genome will be sampled for reads with a length of choice. 
The number of reads will be equal to the total genome length devided by the read length. Then the last will be 
repeated according to the coverage of the genome. For example, a coverage of 10 was assigned to a genome of size
1500bp and a desired read length of 150bp. Then the total number of reads for this genome will be 10*(1500/150) = 100 reads.
A single read is generated by reading at randome location of the genome with a uniform distribution.

For example: if we have genomes of 2 spices A and B at the specified directory. The script gives at randome a
coverage of 10 and 5 respectively. Then the script will sample the genome of spices A 10 times and genome B 5 times.
The total number of reads in the output fasta will be: 10xlen(genomeA)/150 + 5xlen(genomeB)/150.  

The scripe produces a report about the sampling in the form of a tsv file.

Procedure:

1-

Inputs:

1- A directory of genomes fasta files.
2- Desired read length.
3- Fasta output file name.
4- Report output file name.
          
Outputs:

1- A metagenome fasta file.
2- A report file containing meta data and relative abundances.

Author: Tamim AlMurad


Version 1.0
last review Date: March 30th, 2024
"""

import os, sys, random 
import pandas as pd


#Check correct number of argumens.
if len(sys.argv) != 6:
    print("Usage: python NGS_fasta_generator.py <genome_directory> <desired_read_length>" 
          "<fasta_file_name> <report_file_name> <integer>")
    exit()
    

#Assign arguments to variables.
genomesDirectory = sys.argv[1]
readLength = int(sys.argv[2])
outFastaFile = sys.argv[3]
reportFile = sys.argv[4]
coverageMethod = sys.argv[5]																#To indicate the cell counts either random "0" or same for all. 

######################## Function sample_genome ###############################
'''This function takes a fasta file,required read length, genome identifier
    and required coverage
    of a genome and return the following:
    - A list of reads with a uniq id for each read.
    - Number of reads: how many times a genomes is sampled.
    - Genome size: number of nucleaotides.
    - Coverage: number of times the genome was sampled (number of cells in the sample)
'''
def sample_genome(fastaFile,readLength,identifier, coverage):


    
    sequence = fastaFile.readlines()                                                        #Read the whole genome file.
    
    for line in sequence:                                                                   #Loop to revmove the sequence id lines.
        if line.startswith('>'):
            sequence.remove(line)
    
    sequence = ''.join(sequence).replace('\n','')                                           #Join the genome in one string.
    
    reads = []                                                                              #Initialize the reads list which will be returned.
    
    for run in range(coverage):         
        for i in range(int(len(sequence)/readLength)):                            			#Loop to sample along the genome. 
            
            random_location = random.randint(0,len(sequence)- readLength)                   #Choose a random location along the genome.
            read = sequence[random_location:random_location+readLength]                     # Read readLength nucleotides starting at the random location.  
            fastaRead = '>'+identifier + '_Run'+str(run)+'_Read' +str(i)+'\n' + read +'\n'  #A string containing the read and giving it a uniq id.
            reads.append(fastaRead)                                                         #Add a read to the reads list.
    
    return reads,len(reads), len(sequence),coverage
###############################################################################


######################## Function generate_fasta ##############################
'''This function takes a directory location of genomes fasta files, required
     read length and a list of required coverages of the genomes and 
     return the following:
     - A list of reads with a uniq id for each read ready to be out to a fasta file.
     - A panda data frame containing the following columns:
         - Spices (or genome file names).
         - # of reads for each spieces.
         - Genome size.
         - Cell Count (coverage).
         - DNA relative abundance.
         - Cell relative abundance.
 '''
def generate_fasta(genomesLocation,readLength,cellsCount):

    genomeFastaLocations = os.listdir(genomesLocation)                                      # Read the genomes' files names.

    
    fastaOut=[]                                                                             #Initialize a list for the reads.
    
    j=0
    
    spMeta = pd.DataFrame(columns=['Spices','#of Reads','Genome Size', 
                                   'Cell Count','DNA Abundance', 'Cell Abundance'])         # A datarame for the report. Metadata for each genome.
    
    for loc in genomeFastaLocations:                                                        #Iterate over the genomes fasta files to read and sample.   
        
        genomeFile = open(genomesLocation+loc,'r')
        
                                                                                            
        samplingResult=sample_genome(genomeFile,readLength,loc.split('.')[0],cellsCount[j]) #Use the sample_genome function with the specified cell count and the file name as identifier.
        
        fastaOut=fastaOut+samplingResult[0]                                                 #Append the reads of current genome to the final list. 
        
        tempDic ={'Spices':loc.split('.')[0],'#of Reads':samplingResult[1],                 #Temporary dictionary as a row for the report
                      'Genome Size':samplingResult[2], 'Cell Count':samplingResult[3],
                      'DNA Abundance':'','Cell Abundance':''}   
        
        tempDF = pd.DataFrame(tempDic,index=[0])                                            #Temporary dataframe out of the temp dictionary
        
        spMeta=pd.concat([spMeta,tempDF],ignore_index=True)                                 #Append to the report dataframe.

        j=j+1
                                                                                                
        print("finished sampling genome " + loc.split('.')[0] +                             #Progress reporting.
              ", remaining %d genomes."%(len(genomeFastaLocations)-j)) 
        
    
    spMeta['DNA Abundance']= spMeta['#of Reads']/sum(spMeta['#of Reads'])                   #Calculate relative DNA abundance.
    spMeta['Cell Abundance']= spMeta['Cell Count']/sum(spMeta['Cell Count'])                #Calculate relative spices abundance.
    
    return fastaOut, spMeta

###############################################################################
#%%
################################## Main #######################################
genomesFiles = os.listdir(genomesDirectory)                                         #Get the list of genome files.

if int(coverageMethod) > 0:  
	cellsCount = [int(coverageMethod)]*len(genomesFiles)							#Create the same coverage for each genome as desired.													
elif int(coverageMethod) ==0:
	cellsCount=random.choices(range(0,30),k=len(genomesFiles))						#Create random coverage for each genome.
	
fastaOut = generate_fasta(genomesDirectory,readLength, cellsCount)                  #Produce fasta reads list.

output = open(outFastaFile,'w')                                                     #Create and write a fasta file                             
output.writelines(fastaOut[0])
output.close()

fastaOut[1].to_csv(reportFile,sep='\t')                                             #Create and write a report file.


###############################################################################


























